// Code generated by github.com/infiotinc/gqlgenc, DO NOT EDIT.

package graph

import (
	"context"
	"example/somelib"

	"github.com/infiotinc/gqlgenc/client"
	"github.com/infiotinc/gqlgenc/client/transport"
)

type Client struct {
	Client *client.Client
}

type Query struct {
	Room *Chatroom "json:\"room\" graphql:\"room\""
}
type Mutation struct {
	Post Message "json:\"post\" graphql:\"post\""
}
type Subscription struct {
	MessageAdded Message "json:\"messageAdded\" graphql:\"messageAdded\""
}
type GetRoom struct {
	Room *struct {
		Name string "json:\"name\""
	} "json:\"room\""
}
type SubscribeMessageAdded struct {
	MessageAdded struct {
		ID string "json:\"id\""
	} "json:\"messageAdded\""
}

const GetRoomDocument = `query GetRoom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoom(ctx context.Context, name string) (*GetRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data GetRoom
	res, err := c.Client.Query(ctx, "GetRoom", GetRoomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetRoomCustomDocument = `query GetRoomCustom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoomCustom(ctx context.Context, name string) (*somelib.CustomRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data somelib.CustomRoom
	res, err := c.Client.Query(ctx, "GetRoomCustom", GetRoomCustomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const SubscribeMessageAddedDocument = `subscription SubscribeMessageAdded {
	messageAdded(roomName: "test") {
		id
	}
}
`

type MessageSubscribeMessageAdded struct {
	Data  *SubscribeMessageAdded
	Error error
}

func (c *Client) SubscribeMessageAdded(ctx context.Context) (<-chan MessageSubscribeMessageAdded, func()) {
	vars := map[string]interface{}{}

	res := c.Client.Subscription(ctx, "SubscribeMessageAdded", SubscribeMessageAddedDocument, vars)

	ch := make(chan MessageSubscribeMessageAdded)

	go func() {
		for res.Next() {
			opres := res.Get()

			var msg MessageSubscribeMessageAdded
			if len(opres.Errors) > 0 {
				msg.Error = opres.Errors
			}

			err := opres.UnmarshalData(&msg.Data)
			if err != nil && msg.Error == nil {
				msg.Error = err
			}

			ch <- msg
		}

		if err := res.Err(); err != nil {
			ch <- MessageSubscribeMessageAdded{
				Error: err,
			}
		}
		close(ch)
	}()

	return ch, res.Close
}
