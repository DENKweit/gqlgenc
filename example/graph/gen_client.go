// Code generated by github.com/infiotinc/gqlgenc, DO NOT EDIT.

package graph

import (
	"context"

	"github.com/infiotinc/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

type Query struct {
	Room *Chatroom "json:\"room\" graphql:\"room\""
}
type Mutation struct {
	Post Message "json:\"post\" graphql:\"post\""
}
type Subscription struct {
	MessageAdded Message "json:\"messageAdded\" graphql:\"messageAdded\""
}
type GetRoom struct {
	Room *struct {
		Name string "json:\"name\" graphql:\"name\""
	} "json:\"room\" graphql:\"room\""
}
type SubscribeMessageAdded struct {
	MessageAdded struct {
		ID string "json:\"id\" graphql:\"id\""
	} "json:\"messageAdded\" graphql:\"messageAdded\""
}

const GetRoomDocument = `query GetRoom {
	room(name: "test") {
		name
	}
}
`

func (c *Client) GetRoom(ctx context.Context) (*GetRoom, error) {
	vars := map[string]interface{}{}

	var res GetRoom
	if err := c.Client.Query(ctx, GetRoomDocument, vars, &res); err != nil {
		return nil, err
	}

	return &res, nil
}

const SubscribeMessageAddedDocument = `subscription SubscribeMessageAdded {
	messageAdded(roomName: "test") {
		id
	}
}
`

type MessageSubscribeMessageAdded struct {
	Data  *SubscribeMessageAdded
	Error error
}

func (c *Client) SubscribeMessageAdded(ctx context.Context) (chan MessageSubscribeMessageAdded, error) {
	vars := map[string]interface{}{}

	sub, err := c.Client.Subscription(ctx, SubscribeMessageAddedDocument, vars)
	if err != nil {
		return nil, err
	}

	ch := make(chan MessageSubscribeMessageAdded)

	go func() {
		for sub.Next() {
			res := sub.Get()

			var datares MessageSubscribeMessageAdded
			err := res.UnmarshalData(&datares)
			datares.Error = err

			ch <- datares
		}
		if err := sub.Err(); err != nil {
			ch <- MessageSubscribeMessageAdded{
				Error: err,
			}
		}
		close(ch)
	}()

	return ch, nil
}
