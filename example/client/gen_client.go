// Code generated by github.com/infiotinc/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	"example/somelib"

	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/infiotinc/gqlgenc/client"
	"github.com/infiotinc/gqlgenc/client/transport"
)

type Client struct {
	Client *client.Client
}
type GetRoom_Room struct {
	Name string "json:\"name\""
}
type GetRoom struct {
	Room GetRoom_Room "json:\"room\""
}
type GetMedias_Image struct {
	Size     int64               "json:\"size\""
	Typename *introspection.Type "json:\"__typename\""
}
type GetMedias_Video struct {
	Duration int64               "json:\"duration\""
	Typename *introspection.Type "json:\"__typename\""
}
type GetMedias_Medias struct {
	Image *GetMedias_Image
	Video *GetMedias_Video
}

func (t *GetMedias_Medias) UnmarshalJSON(data []byte) error {
	type Alias GetMedias_Medias
	var r struct {
		Typename string `json:"__typename"`
		Alias
	}

	err := json.Unmarshal(data, &r)
	if err != nil {
		return err
	}

	*t = GetMedias_Medias(r.Alias)

	switch r.Typename {
	case "Image":
		var a GetMedias_Image
		err = json.Unmarshal(data, &a)
		if err != nil {
			return err
		}

		t.Image = &a
	case "Video":
		var a GetMedias_Video
		err = json.Unmarshal(data, &a)
		if err != nil {
			return err
		}

		t.Video = &a
	}

	return nil
}

type GetMedias struct {
	Medias []GetMedias_Medias "json:\"medias\""
}
type GetBooks_Textbook struct {
	Courses  []string            "json:\"courses\""
	Typename *introspection.Type "json:\"__typename\""
}
type GetBooks_ColoringBook struct {
	Colors   []string            "json:\"colors\""
	Typename *introspection.Type "json:\"__typename\""
}
type GetBooks_Books struct {
	Title        string "json:\"title\""
	Textbook     *GetBooks_Textbook
	ColoringBook *GetBooks_ColoringBook
}

func (t *GetBooks_Books) UnmarshalJSON(data []byte) error {
	type Alias GetBooks_Books
	var r struct {
		Typename string `json:"__typename"`
		Alias
	}

	err := json.Unmarshal(data, &r)
	if err != nil {
		return err
	}

	*t = GetBooks_Books(r.Alias)

	switch r.Typename {
	case "ColoringBook":
		var a GetBooks_ColoringBook
		err = json.Unmarshal(data, &a)
		if err != nil {
			return err
		}

		t.ColoringBook = &a
	case "Textbook":
		var a GetBooks_Textbook
		err = json.Unmarshal(data, &a)
		if err != nil {
			return err
		}

		t.Textbook = &a
	}

	return nil
}

type GetBooks struct {
	Books []GetBooks_Books "json:\"books\""
}
type SubscribeMessageAdded_MessageAdded struct {
	ID string "json:\"id\""
}
type SubscribeMessageAdded struct {
	MessageAdded SubscribeMessageAdded_MessageAdded "json:\"messageAdded\""
}

const GetRoomDocument = `query GetRoom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoom(ctx context.Context, name string) (*GetRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data GetRoom
	res, err := c.Client.Query(ctx, "GetRoom", GetRoomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetRoomCustomDocument = `query GetRoomCustom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoomCustom(ctx context.Context, name string) (*somelib.CustomRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data somelib.CustomRoom
	res, err := c.Client.Query(ctx, "GetRoomCustom", GetRoomCustomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetMediasDocument = `query GetMedias {
	medias {
		... on Image {
			size
			__typename: 
		}
		... on Video {
			duration
			__typename: 
		}
	}
}
`

func (c *Client) GetMedias(ctx context.Context) (*GetMedias, transport.OperationResponse, error) {
	vars := map[string]interface{}{}

	var data GetMedias
	res, err := c.Client.Query(ctx, "GetMedias", GetMediasDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetBooksDocument = `query GetBooks {
	books {
		title
		... on Textbook {
			courses
			__typename: 
		}
		... on ColoringBook {
			colors
			__typename: 
		}
	}
}
`

func (c *Client) GetBooks(ctx context.Context) (*GetBooks, transport.OperationResponse, error) {
	vars := map[string]interface{}{}

	var data GetBooks
	res, err := c.Client.Query(ctx, "GetBooks", GetBooksDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const SubscribeMessageAddedDocument = `subscription SubscribeMessageAdded {
	messageAdded(roomName: "test") {
		id
	}
}
`

type MessageSubscribeMessageAdded struct {
	Data       *SubscribeMessageAdded
	Error      error
	Extensions transport.RawExtensions
}

func (c *Client) SubscribeMessageAdded(ctx context.Context) (<-chan MessageSubscribeMessageAdded, func()) {
	vars := map[string]interface{}{}

	res := c.Client.Subscription(ctx, "SubscribeMessageAdded", SubscribeMessageAddedDocument, vars)

	ch := make(chan MessageSubscribeMessageAdded)

	go func() {
		for res.Next() {
			opres := res.Get()

			var msg MessageSubscribeMessageAdded
			if len(opres.Errors) > 0 {
				msg.Error = opres.Errors
			}

			err := opres.UnmarshalData(&msg.Data)
			if err != nil && msg.Error == nil {
				msg.Error = err
			}

			msg.Extensions = opres.Extensions

			ch <- msg
		}

		if err := res.Err(); err != nil {
			ch <- MessageSubscribeMessageAdded{
				Error: err,
			}
		}
		close(ch)
	}()

	return ch, res.Close
}
