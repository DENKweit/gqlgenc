// Code generated by github.com/infiotinc/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"example/client/model"
	"example/somelib"

	"github.com/infiotinc/gqlgenc/client"
	"github.com/infiotinc/gqlgenc/client/transport"
)

type Client struct {
	Client *client.Client
}

// Query
type Query struct {
	Room   *model.Chatroom "json:\"room\""
	Medias []model.Media   "json:\"medias\""
	Books  []model.Book    "json:\"books\""
}

// Mutation
type Mutation struct {
	Post model.Message "json:\"post\""
}

// Subscription
type Subscription struct {
	MessageAdded model.Message "json:\"messageAdded\""
}

// Fragments

// OperationResponses
type GetRoom struct {
	Room *struct {
		Name string "json:\"name\""
	} "json:\"room\""
}
type GetMedias struct {
	Medias []*struct {
		Image struct {
			Size int64 "json:\"size\""
		} "json:\",inline\""
		Video struct {
			Duration int64 "json:\"duration\""
		} "json:\",inline\""
	} "json:\"medias\""
}
type GetBooks struct {
	Books []*struct {
		Title    string "json:\"title\""
		Textbook struct {
			Courses []string "json:\"courses\""
		} "json:\",inline\""
		ColoringBook struct {
			Colors []string "json:\"colors\""
		} "json:\",inline\""
	} "json:\"books\""
}
type SubscribeMessageAdded struct {
	MessageAdded struct {
		ID string "json:\"id\""
	} "json:\"messageAdded\""
}

// Operations
const GetRoomDocument = `query GetRoom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoom(ctx context.Context, name string) (*GetRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data GetRoom
	res, err := c.Client.Query(ctx, "GetRoom", GetRoomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetRoomCustomDocument = `query GetRoomCustom ($name: String!) {
	room(name: $name) {
		name
	}
}
`

func (c *Client) GetRoomCustom(ctx context.Context, name string) (*somelib.CustomRoom, transport.OperationResponse, error) {
	vars := map[string]interface{}{
		"name": name,
	}

	var data somelib.CustomRoom
	res, err := c.Client.Query(ctx, "GetRoomCustom", GetRoomCustomDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetMediasDocument = `query GetMedias {
	medias {
		... on Image {
			size
		}
		... on Video {
			duration
		}
	}
}
`

func (c *Client) GetMedias(ctx context.Context) (*GetMedias, transport.OperationResponse, error) {
	vars := map[string]interface{}{}

	var data GetMedias
	res, err := c.Client.Query(ctx, "GetMedias", GetMediasDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const GetBooksDocument = `query GetBooks {
	books {
		title
		... on Textbook {
			courses
		}
		... on ColoringBook {
			colors
		}
	}
}
`

func (c *Client) GetBooks(ctx context.Context) (*GetBooks, transport.OperationResponse, error) {
	vars := map[string]interface{}{}

	var data GetBooks
	res, err := c.Client.Query(ctx, "GetBooks", GetBooksDocument, vars, &data)
	if err != nil {
		return nil, transport.OperationResponse{}, err
	}

	return &data, res, nil
}

const SubscribeMessageAddedDocument = `subscription SubscribeMessageAdded {
	messageAdded(roomName: "test") {
		id
	}
}
`

type MessageSubscribeMessageAdded struct {
	Data       *SubscribeMessageAdded
	Error      error
	Extensions transport.RawExtensions
}

func (c *Client) SubscribeMessageAdded(ctx context.Context) (<-chan MessageSubscribeMessageAdded, func()) {
	vars := map[string]interface{}{}

	res := c.Client.Subscription(ctx, "SubscribeMessageAdded", SubscribeMessageAddedDocument, vars)

	ch := make(chan MessageSubscribeMessageAdded)

	go func() {
		for res.Next() {
			opres := res.Get()

			var msg MessageSubscribeMessageAdded
			if len(opres.Errors) > 0 {
				msg.Error = opres.Errors
			}

			err := opres.UnmarshalData(&msg.Data)
			if err != nil && msg.Error == nil {
				msg.Error = err
			}

			msg.Extensions = opres.Extensions

			ch <- msg
		}

		if err := res.Err(); err != nil {
			ch <- MessageSubscribeMessageAdded{
				Error: err,
			}
		}
		close(ch)
	}()

	return ch, res.Close
}
