{{- if .GenerateClient }}
	{{ reserveImport "bytes" }}
	{{ reserveImport "context" }}
	{{ reserveImport "encoding/json" }}
	{{ reserveImport "fmt" }}
	{{ reserveImport "io" }}
	{{ reserveImport "io/ioutil" }}
	{{ reserveImport "net/http" }}
	{{ reserveImport "net/url" }}
	{{ reserveImport "path" }}
	{{ reserveImport "time" }}

	{{ reserveImport "github.com/infiotinc/gqlgenc/client" }}
	{{ reserveImport "github.com/infiotinc/gqlgenc/client/transport" }}

	type Client struct {
	    Client *client.Client
	}
{{- end }}

{{- range $name, $element := .Types }}
	type  {{ .Name | go  }} {{ .Type | ref }}
{{- end }}

{{- range $op := .Operations }}
	const {{ $op.Name|go }}Document = `{{ $op.Operation }}`

	{{- if $.GenerateClient }}
        {{- if eq $op.OperationType "subscription" }}
            type Message{{ $op.Name|go }} struct {
                Data       *{{ $op.ResponseType | ref }}
                Error      error
                Extensions transport.RawExtensions
            }

            func (c *Client) {{ $op.Name|go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (<-chan Message{{ $op.Name|go }}, func()) {
                vars := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                res := c.Client.Subscription(ctx, "{{ $op.Name|go }}", {{ $op.Name|go }}Document, vars)

                ch := make(chan Message{{ $op.Name|go }})

                go func() {
                    for res.Next() {
                        opres := res.Get()

                        var msg Message{{ $op.Name|go }}
                        if len(opres.Errors) > 0 {
                            msg.Error = opres.Errors
                        }

                        err := opres.UnmarshalData(&msg.Data)
                        if err != nil && msg.Error == nil {
                            msg.Error = err
                        }

                        msg.Extensions = opres.Extensions

                        ch <- msg
                    }

                    if err := res.Err(); err != nil {
                        ch <- Message{{ $op.Name|go }} {
                            Error: err,
                        }
                    }
                    close(ch)
                }()

                return ch, res.Close
            }
        {{- else}}
            func (c *Client) {{ $op.Name|go }} (ctx context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (*{{ $op.ResponseType | ref }}, transport.OperationResponse, error) {
                vars := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                var data {{ $op.ResponseType | ref }}
                res, err := c.Client.{{ $op.OperationType|ucFirst }}(ctx, "{{ $op.Name|go }}", {{ $op.Name|go }}Document, vars, &data)
                if err != nil {
                    return nil, transport.OperationResponse{}, err
                }

                return &data, res, nil
            }
        {{- end}}
	{{- end}}
{{- end}}
