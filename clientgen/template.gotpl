{{- if .GenerateClient }}
	{{ reserveImport "bytes" }}
	{{ reserveImport "context" }}
	{{ reserveImport "encoding/json" }}
	{{ reserveImport "fmt" }}
	{{ reserveImport "io" }}
	{{ reserveImport "io/ioutil" }}
	{{ reserveImport "net/http" }}
	{{ reserveImport "net/url" }}
	{{ reserveImport "path" }}
	{{ reserveImport "time" }}

	{{ reserveImport "github.com/infiotinc/gqlgenc/client" }}
	{{ reserveImport "github.com/infiotinc/gqlgenc/client/transport" }}

	type Client struct {
	    Client *client.Client
	}
{{- end }}

{{/* Greek character used to prevent name conflicts */}}

{{- range $name, $element := .Types }}
	type {{ .Name  }} {{ .Type | ref }}

    {{- if .UnmarshalTypes }}
    func (t *{{ .Name }}) UnmarshalJSON(data []byte) error {
        type Aliαs {{ .Name }}
        var r Aliαs

        err := json.Unmarshal(data, &r)
        if err != nil {
            return err
        }

        *t = {{ .Name }}(r)

        switch r.Typename {
        {{- range $typename, $target := .UnmarshalTypes }}
            case "{{ $typename }}":
                var a {{ $target.Type | ref }}
                err = json.Unmarshal(data, &a)
                if err != nil {
                    return err
                }

                t.{{ $target.Name }} = &a
        {{- end }}
        }

        return nil
    }
    {{- end }}
{{- end }}

{{- range $op := .Operations }}
	const {{ $op.Name|go }}Document = `{{ $op.Operation }}`

	{{- if $.GenerateClient }}
        {{- if eq $op.OperationType "subscription" }}
            type Message{{ $op.Name|go }} struct {
                Data       *{{ $op.ResponseType | ref }}
                Error      error
                Extensions transport.RawExtensions
            }

            func (ϲ *Client) {{ $op.Name|go }} (ctϰ context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (<-chan Message{{ $op.Name|go }}, func()) {
                vαrs := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                { {{/* New block to prevent var names conflicts */}}
                    res := ϲ.Client.Subscription(ctϰ, "{{ $op.Name|go }}", {{ $op.Name|go }}Document, vαrs)

                    ch := make(chan Message{{ $op.Name|go }})

                    go func() {
                        for res.Next() {
                            opres := res.Get()

                            var msg Message{{ $op.Name|go }}
                            if len(opres.Errors) > 0 {
                                msg.Error = opres.Errors
                            }

                            err := opres.UnmarshalData(&msg.Data)
                            if err != nil && msg.Error == nil {
                                msg.Error = err
                            }

                            msg.Extensions = opres.Extensions

                            ch <- msg
                        }

                        if err := res.Err(); err != nil {
                            ch <- Message{{ $op.Name|go }} {
                                Error: err,
                            }
                        }
                        close(ch)
                    }()

                    return ch, res.Close
                }
            }
        {{- else}}
            func (ϲ *Client) {{ $op.Name|go }} (ctϰ context.Context{{- range $arg := .Args }}, {{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }}) (*{{ $op.ResponseType | ref }}, transport.OperationResponse, error) {
                vαrs := map[string]interface{}{
                {{- range $args := .VariableDefinitions}}
                    "{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
                {{- end }}
                }

                { {{/* New block to prevent var names conflicts */}}
                    var data {{ $op.ResponseType | ref }}
                    res, err := ϲ.Client.{{ $op.OperationType|ucFirst }}(ctϰ, "{{ $op.Name|go }}", {{ $op.Name|go }}Document, vαrs, &data)
                    if err != nil {
                        return nil, transport.OperationResponse{}, err
                    }

                    return &data, res, nil
                }
            }
        {{- end}}
	{{- end}}
{{- end}}
